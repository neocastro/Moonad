// The Empty type has no elements.
T Empty

// The Unit type has 1 element.
T Unit
| Unit.new;

// The Bool type has 2 elements.
T Bool
| Bool.true;
| Bool.false;

// The Bit type has 2 elements.
T Bit
| Bit.0;
| Bit.1;

// The Cmp type has 3 elements.
// It represents a size comparison.
T Cmp
| Cmp.ltn;
| Cmp.eql;
| Cmp.gtn;

// The Nat type has ∞ elements.
// It represents the set of non-negative integers.
T Nat
| Nat.zero;
| Nat.succ(pred: Nat);

// The Bits type has ∞ elements.
// It represents the set of bitstrings.
T Bits
| Bits.nil;
| Bits.0(pred: Bits);
| Bits.1(pred: Bits);

// The Word type has ∞ elements.
// It represents the set of fixed-length bitstrings.
T Word                                ~ (size: Nat)
| Word.nil                            ~ (Nat.zero);
| Word.0<size: Nat>(pred: Word(size)) ~ (Nat.succ(size));
| Word.1<size: Nat>(pred: Word(size)) ~ (Nat.succ(size));

// The Pair type contains 2 elements of both of 2 possibly different types.
T Pair<A: Type, B: Type>
| Pair.new(fst: A, snd: B);

// The Maybe type contains either an element of some type, or nothing at all.
T Maybe<A: Type>
| Maybe.none;
| Maybe.some(value: A);

// The Either type contains 1 element of either of 2 possibly different types.
T Either<A: Type, B: Type>
| Either.left(value: A);
| Either.right(value: B);

// The List type contains a varying number of elements of some type.
T List<A: Type>
| List.nil;
| List.cons(head: A, tail: List(A));

// The Vector type contains a fixed number of elements of some type.
T Vector<A: Type>                                 ~ (size: Nat)
| Vector.nil                                      ~ (Nat.zero);
| Vector.ext<size: Nat>(x: A, xs: Vector(A,size)) ~ (Nat.succ(size));

// The Array type contains 2^depth elements of some type.
// It allows O(log(depth)) write and reads for fixed length binary keys.
T Array<A: Type>
  ~ (depth: Nat)
| Array.tip(value: A)
  ~ (Nat.zero);
| Array.tie<depth: Nat>(lft: Array(A,depth), rgt: Array(A,depth))
  ~ (Nat.succ(depth));

// The Map type maps from bitstrings to elements of some type.
T Map<A: Type>
| Map.new;
| Map.tie(val: Maybe(A), lft: Map(A), rgt: Map(A));

// The U8 type has 256 elements.
// It represents 8-bit unsigned integers.
T U8
| U8.new(word: Word(8));

// The U16 type has 65536 elements.
// It represents 16-bit unsigned integers.
T U16
| U16.new(word: Word(16));

// The U32 type has 4294967296 elements.
// It represents 32-bit unsigned integers.
T U32
| U32.new(word: Word(32));

// The U64 type has 18446744073709551616 elements.
// It represents 64-bit unsigned integers.
T U64
| U64.new(word: Word(64));

// The F64 type has 18446744073709551616 elements.
// It represents IEEE 754 doubles.
T F64
| F64.new(word: Word(64));

// The Char type represents a Unicode codepoint on the Basic Multilingual Plane.
Char: Type
  U16

// The String type represents a sequence of chars.
T String
| String.nil;
| String.cons(head: Char, tail: String);

// The Buffer32 type contains 2^depth 32-bit unsigned integers.
T Buffer32
| Buffer32.new(depth: Nat, array: Array(U32, depth));

// The Equal type represents an evidence that two values are the same.
T Equal<A: Type>(a: A) ~ (b: A)
| Equal.to             ~ (a);

// A monad is just a monoid in the category of endofunctors.
// We reassure there is nothing wrong with that.
T Monad<M: Type -> Type>
| Monad.new(
  bind: <A: Type, B: Type> -> M(A) -> (A -> M(B)) -> M(B),
  pure: <A: Type> -> A -> M(A));

// A string-based question-and-answer interface with an external environment.
T IO<A: Type>
| IO.end(value: A);
| IO.ask(query: String, param: String, then: String -> IO(A));

// The App type represents an interactive application
T App<S: Type>
| App.new(
  init: S,
  draw: S -> App.Render,
  when: App.Event -> S -> S);

// The App type render format
T App.Render
| App.Render.txt(text: String);
| App.Render.vox(voxs: VoxModel);

// The App type event format
T App.Event
| App.Event.tick(date: U64, screen: Pair(U32,U32), mouse: Pair(U32,U32));
| App.Event.ukey(down: Bool, code: U16);
| App.Event.post(date: U64, auth: String, name: String, head: String, body: String);

// TODO 
Pos32: Type
  U32

// TODO 
Col32: Type
  U32

// TODO 
T VoxModel
| VoxModel.new(size: U32, buffer: Buffer32);

// Not represents a logical negation.
Not(P: Type): Type
  P -> Empty

// And represents a logical conjunction.
And(A: Type, B: Type): Type
  Pair(A, B)

// Or represents a logical disjunction.
Or(A: Type, B: Type): Type
  Either(A, B)

// If we have an element of the empty type, then we can prove anything.
Empty.absurd<P: Type>(x: Empty): P
  case x:

// What is the opposite of this bool?
Bool.not(a: Bool):  Bool
  case a:
  | Bool.false;
  | Bool.true;

// Is any of these bools true?
Bool.or(a: Bool, b: Bool): Bool
  case a:
  | Bool.true;
  | case b:
    | Bool.true;
    | Bool.false;;

// Are both of these bools true?
Bool.and(a: Bool, b: Bool): Bool
  case a:
  | case b:
    | Bool.true;
    | Bool.false;;
  | Bool.false;

// If, then, else
Bool.if<A: Type>(cond: Bool, true_case: A, false_case: A): A
  case cond:
  | true_case;
  | false_case;

// To prove that `true != false`, we:
// 1. Define a predicate `P : Bool -> Type` such that:
//   - `P(true)  == Unit`
//   - `P(false) == Empty`
// 2. Define a value `p_true : P(true)`.
//   - Since `P(true) ~> Unit`, then we use `Unit.new`.
// 3. Assume that `true == false`.
//   - Since we're proving a `Not(X)`, we can assume `X` with a lambda.
// 4. Since `p_true : P(true)` and `true == false`, then `p_true : P(false)`.
//   - We can cast using `Equal.rewrite`. 
// 5. Since `P(false) ~> Empty`, we have a contradiction. Thus, `false != true`.
Bool.true_isnt_false: Not(Equal(Bool, Bool.true, Bool.false))
  def P(b : Bool)
    case b:
    | Unit;
    | Empty;
  def p_true
    Unit.new
  (true_is_false)
    Equal.rewrite<_,_,_,P>(true_is_false, p_true)

// The proof of `false != true` is similar.
Bool.false_isnt_true: Not(Equal(Bool, Bool.false, Bool.true))
  def P(b : Bool)
    case b:
    | Empty;
    | Unit;
  def p_false
    Unit.new
  (false_is_true)
    Equal.rewrite<_,_,_,P>(false_is_true, p_false)

// n < m
Cmp.as_ltn(cmp: Cmp): Bool
  case cmp:
  | Bool.true;
  | Bool.false;
  | Bool.false;

// n <= m
Cmp.as_lte(cmp: Cmp): Bool
  case cmp:
  | Bool.true;
  | Bool.true;
  | Bool.false;

// n == m
Cmp.as_eql(cmp: Cmp): Bool
  case cmp:
  | Bool.false;
  | Bool.true;
  | Bool.false;

// n >= m
Cmp.as_gte(cmp: Cmp): Bool
  case cmp:
  | Bool.false;
  | Bool.true;
  | Bool.true;

// n > m
Cmp.as_gtn(cmp: Cmp): Bool
  case cmp:
  | Bool.false;
  | Bool.false;
  | Bool.true;

// Decreases a nat by one:
Nat.pred(n: Nat): Nat
  case n:
  | Nat.zero;
  | n.pred;

// Adds two nats:
Nat.add(n: Nat, m: Nat): Nat
  case n:
  | m;
  | Nat.succ(Nat.add(n.pred, m));

// Multiplies two nats:
Nat.mul(n: Nat, m: Nat): Nat
  case n:
  | Nat.zero;
  | Nat.add(m, Nat.mul(n.pred, m));

// Subtracts two nats:
Nat.sub(n: Nat, m: Nat): Nat
  case m:
  | n;
  | case n:
    | Nat.zero;
    | Nat.sub(n.pred, m.pred);;

// If `a >= b`, returns `right(a - b)`, else, returns `left(b - a)`.
Nat.sub_rem(n: Nat, m: Nat): Either(Nat, Nat)
  case m:
  | Either.left<_,_>(n);
  | case n:
    | Either.right<_,_>(Nat.succ(m.pred));
    | Nat.sub_rem(n.pred, m.pred);;

// Division and modulus:
Nat.div_mod(n: Nat, m: Nat): Pair(Nat, Nat)
  Nat.div_mod.go(n, m, Nat.zero)
Nat.div_mod.go(n: Nat, m: Nat, d: Nat): Pair(Nat, Nat)
  case Nat.sub_rem(n, m) as p:
  | Nat.div_mod.go(p.value, m, Nat.succ(d));
  | Pair.new<_,_>(d, n);

// Returns `n` modulus `m`:
Nat.mod(n: Nat, m: Nat): Nat
  Pair.snd<_,_>(Nat.div_mod(n, m))

// Divides two nats:
Nat.div(n: Nat, m: Nat): Nat
  Pair.fst<_,_>(Nat.div_mod(n, m))

// Compares two nats:
Nat.cmp(a: Nat, b: Nat): Cmp
  case a:
  | case b:
    | Cmp.eql;
    | Cmp.ltn;;
  | case b:
    | Cmp.gtn;
    | Nat.cmp(a.pred, b.pred);;

// Is `n < m`?
Nat.ltn(n: Nat, m: Nat): Bool
  Cmp.as_ltn(Nat.cmp(n, m))

// Is `n <= m`?
Nat.lte(n: Nat, m: Nat): Bool
  Cmp.as_lte(Nat.cmp(n, m))

// Is `n == m`?
Nat.eql(n: Nat, m: Nat): Bool
  Cmp.as_eql(Nat.cmp(n, m))

// Is `n >= m`?
Nat.gte(n: Nat, m: Nat): Bool
  Cmp.as_gte(Nat.cmp(n, m))

// Is `n > m`?
Nat.gtn(n: Nat, m: Nat): Bool
  Cmp.as_gtn(Nat.cmp(n, m))

// 1+x != 0
Nat.succ_isnt_zero<n: Nat>: Not(Equal(Nat, Nat.succ(n), Nat.zero))
  def P(n : Nat)
    case n:
    | Empty;
    | Unit;
  def p_succ
    Unit.new
  (succ_is_zero)
    Equal.rewrite<_,_,_,P>(succ_is_zero, p_succ)

// 0 != 1+x
Nat.zero_isnt_succ<n: Nat>: Not(Equal(Nat, Nat.zero, Nat.succ(n)))
  def P(n : Nat)
    case n:
    | Unit;
    | Empty;
  def p_zero
    Unit.new
  (zero_is_succ)
    Equal.rewrite<_,_,_,P>(zero_is_succ, p_zero)

// Repeated application
Nat.apply: <A: Type> -> (n: Nat, f: A -> A, x: A) -> A
  Nat.apply.go
Nat.apply.go<A: Type>(n: Nat, f: A -> A, x: A): A
  case n:
  | x;
  | Nat.apply.go<A>(n.pred, f, f(x));

// Conversion to u8
Nat.to_u8(n: Nat): U8
  Nat.apply<U8>(n, U8.inc, U8.0)

// Conversion to u16
Nat.to_u16(n: Nat): U16
  Nat.apply<U16>(n, U16.inc, U16.0)

// Conversion to u32
Nat.to_u32(n: Nat): U32
  Nat.apply<U32>(n, U32.inc, U32.0)

// Conversion to u64
Nat.to_u64(n: Nat): U64
  Nat.apply<U64>(n, U64.inc, U64.0)

// Conversion to f64: x = (s ? 1 : -1) * (a / 10 ** b)
Nat.to_f64(s: Bool, a: Nat, b: Nat): F64
  Nat.to_f64(s, a, b)

// Right fold for Bits
Bits.fold<P: Type>(nil: P, b0: P -> P, b1: P -> P, bits: Bits): P
  case bits:
  | nil;
  | b0(Bits.fold<P>(nil, b0, b1, bits.pred));
  | b1(Bits.fold<P>(nil, b0, b1, bits.pred));

// Left fold for Bits
Bits.foldl<P: Type>(nil: P, b0: P -> P, b1: P -> P, bits: Bits): P
  case bits:
  | nil;
  | Bits.foldl<P>(b0(nil), b0, b1, bits.pred);
  | Bits.foldl<P>(b1(nil), b0, b1, bits.pred);

// Reverses a Bits
Bits.reverse(bits: Bits): Bits
  Bits.foldl<Bits>(Bits.nil, Bits.0, Bits.1, bits)

// Increment a Bits
Bits.inc(a: Bits): Bits
  case a:
  | Bits.nil;
  | Bits.1(a.pred);
  | Bits.0(Bits.inc(a.pred));

// Bits concatenation
Bits.concat(a: Bits, b: Bits): Bits
  case a:
  | b;
  | Bits.0(Bits.concat(a.pred, b));
  | Bits.1(Bits.concat(a.pred, b));

// Bits equality
Bits.eql(a: Bits, b: Bits): Bool
  case a:
  | case b:
    | Bool.true;
    | Bool.false;
    | Bool.false;;
  | case b:
    | Bool.false;
    | Bits.eql(a.pred, b.pred);
    | Bool.false;;
  | case b:
    | Bool.false;
    | Bool.false;
    | Bits.eql(a.pred, b.pred);;

// If `a == b`, then `f(a) == f(b)`
Equal.apply<A: Type, B: Type, a: A, b: A, f: A -> B>(e: Equal(A,a,b))
: Equal(B, f(a), f(b))
  case e:
  | Equal.to<B, f(a)>;
  : Equal(B, f(a), f(e.b));

// If `a == b` and `b == c`, then `a == c`
Equal.chain<A: Type, a: A, b: A, c: A>(d: Equal(A, a, b), e: Equal(A, b, c))
: Equal(A, a, c)
  case e:
  | d;
  : Equal(A, a, e.b);

// If `a == b`, then `b == a`:
Equal.mirror<A: Type, a: A, b: A>(e: Equal(A, a, b))
: Equal(A, b, a)
  case e:
  | Equal.to<A, a>;
  : Equal(A, e.b, a);

// If `a == b`, then, cast `x : P(a)` to `x : P(b)`:
Equal.rewrite<A:Type, a:A, b:A, P: A -> Type>(e: Equal(A,a,b), x: P(a)): P(b)
  case e:
  | x;
  : P(e.b);

// If `a == x` and `b == x`, then `a == b`
Equal.left<A: Type, x: A, a: A, b: A>(r: Equal(A, a, x), s: Equal(A, b, x))
: Equal(A, a, b)
  Equal.chain<A, a, x, b>(r, Equal.mirror<A, b, x>(s))

// If `x == a` and `x == b`, then `a == b`
Equal.right<A: Type, x: A, a: A, b: A>(r: Equal(A, x, a), s: Equal(A, x, b))
: Equal(A, a, b)
  Equal.chain<A, a, x, b>(Equal.mirror<A, x, a>(r), s)

// Increments a word
Word.inc<size: Nat>(word: Word(size)): Word(size)
  case word:
  | Word.nil;
  | Word.1<word.size>(word.pred);
  | Word.0<word.size>(Word.inc<word.size>(word.pred));
  : Word(word.size);

// Zero word
Word.zero(size: Nat): Word(size)
  case size:
  | Word.nil;
  | Word.0<size.pred>(Word.zero(size.pred));
  : Word(size.self);

// Trims a word
Word.trim<size: Nat>(new_size: Nat, word: Word(size)): Word(new_size)
  case new_size:
  | Word.nil;
  | case word:
    | Word.0<new_size.pred>(Word.trim<Nat.zero>(new_size.pred, Word.nil));
    | Word.0<new_size.pred>(Word.trim<word.size>(new_size.pred, word.pred));
    | Word.1<new_size.pred>(Word.trim<word.size>(new_size.pred, word.pred));;
  : Word(new_size.self);

// Reverses a word
Word.reverse<size: Nat>(word: Word(size)): Word(size)
  def nil = Word.nil
  def w0  = <size> (rev) Word.0<size>(rev)
  def w1  = <size> (rev) Word.1<size>(rev)
  Word.foldl<Word, size>(nil, w0, w1, word)

// Right fold a word
Word.fold<P: Nat -> Type, m: Nat>
(nil  : P(Nat.zero))
(w0   : <n: Nat> -> P(n) -> P(Nat.succ(n)))
(w1   : <n: Nat> -> P(n) -> P(Nat.succ(n)))
(word : Word(m))
: P(m)
  case word:
  | nil;
  | w0<word.size>(Word.fold<P,word.size>(nil, w0, w1, word.pred));
  | w1<word.size>(Word.fold<P,word.size>(nil, w0, w1, word.pred));
  : P(word.size);

// Left fold a word
Word.foldl<P: Nat -> Type, m: Nat>
(nil  : P(Nat.zero))
(w0   : <n: Nat> -> P(n) -> P(Nat.succ(n)))
(w1   : <n: Nat> -> P(n) -> P(Nat.succ(n)))
(word : Word(m))
: P(m)
  case word:
  | nil;
  | def P   = (n) P(Nat.succ(n))
    def nil = w0<Nat.zero>(nil)
    def w0  = <x> w0<Nat.succ(x)>
    def w1  = <x> w1<Nat.succ(x)>
    Word.foldl<P, word.size>(nil, w0, w1, word.pred);
  | def P   = (n) P(Nat.succ(n))
    def nil = w1<Nat.zero>(nil)
    def w0  = <x> w0<Nat.succ(x)>
    def w1  = <x> w1<Nat.succ(x)>
    Word.foldl<P, word.size>(nil, w0, w1, word.pred);
  : P(word.size);

// Converts a Word to a Nat
Word.to_nat<size: Nat>(word: Word(size)): Nat
  Word.fold<()Nat,size>(0, <> Nat.mul(2), <> (x) Nat.succ(Nat.mul(2, x)), word)

// Compares two words
Word.cmp.go<size: Nat>(a: Word(size), b: Word(size), c: Cmp): Cmp
  case a:
  with b : Word(a.size) = b;
  | c;
  | case b:
    with a.pred : Word(Nat.pred(b.size)) = a.pred;
    | c;
    | Word.cmp.go<b.size>(a.pred, b.pred, c);
    | Word.cmp.go<b.size>(a.pred, b.pred, Cmp.ltn);;
  | case b:
    with a.pred : Word(Nat.pred(b.size)) = a.pred;
    | c;
    | Word.cmp.go<b.size>(a.pred, b.pred, Cmp.gtn);
    | Word.cmp.go<b.size>(a.pred, b.pred, c);;

// Compares two words
Word.cmp<size: Nat>(a: Word(size), b: Word(size)): Cmp
  Word.cmp.go<size>(a, b, Cmp.eql)

// a < b
Word.ltn<size:Nat>(a: Word(size), b: Word(size)): Bool
  Cmp.as_ltn(Word.cmp<size>(a, b))

// a <= b
Word.lte<size:Nat>(a: Word(size), b: Word(size)): Bool
  Cmp.as_lte(Word.cmp<size>(a, b))

// a == b
Word.eql<size:Nat>(a: Word(size), b: Word(size)): Bool
  Cmp.as_eql(Word.cmp<size>(a, b))

// a >= b
Word.gte<size:Nat>(a: Word(size), b: Word(size)): Bool
  Cmp.as_gte(Word.cmp<size>(a, b))

// a > b
Word.gtn<size:Nat>(a: Word(size), b: Word(size)): Bool
  Cmp.as_gtn(Word.cmp<size>(a, b))

// Extracts the first element of a pair
Pair.fst<A: Type, B: Type>(pair: Pair(A,B)): A
  case pair:
  | pair.fst;

// Extracts the second element of a pair
Pair.snd<A: Type, B: Type>(pair: Pair(A,B)): B
  case pair:
  | pair.snd;

// Extracts the value of a maybe with a default
Maybe.extract<A: Type>(m: Maybe(A), a: A): A
  case m:
  | a;
  | m.value;

// Applies a function to the contents of a maybe
Maybe.map<A: Type, B: Type>(f: A -> B, m: Maybe(A)): Maybe(B)
  case m:
  | Maybe.none<B>;
  | Maybe.some<B>(f(m.value));

// Monad instance for Maybe
Maybe.bind<A: Type, B: Type>(m: Maybe(A), f: A -> Maybe(B)): Maybe(B)
  case m:
  | Maybe.none<B>;
  | f(m.value);
Maybe.pure<A: Type>(a: A): Maybe(A)
  Maybe.some<A>(a)
Maybe.monad: Monad(Maybe)
  Monad.new<Maybe>(Maybe.bind, Maybe.pure)

// Eiter binder
Either.bind<A: Type, B: Type, C: Type>(e: Either(A,B), f: B -> Either(A,C))
: Either(A,C)
  case e:
  | Either.left<A,C>(e.value);
  | f(e.value);

// Converts a list to its non-inductive Church encoding
List.fold<A: Type>(list: List(A))<P: Type>(nil: P, cons: A -> P -> P): P
  case list:
  | nil;
  | cons(list.head, List.fold<A>(list.tail)<P>(nil, cons));

// Foldl for List
List.foldl<A: Type>(list: List(A))<P: Type>(nil: P, cons: A -> P -> P): P
  case list:
  | nil;
  | List.foldl<A>(list.tail)<P>(cons(list.head, nil), cons);

// Applies a function to every element of a list
List.map<A: Type, B: Type>(f: A -> B, as: List(A)): List(B)
  case as:
  | List.nil<B>;
  | List.cons<B>(f(as.head), List.map<A,B>(f, as.tail));

// Concatenates two lists.
List.concat<A: Type>(as: List(A), bs: List(A)): List(A)
  case as:
  | bs;
  | List.cons<>(as.head, List.concat<>(as.tail,bs));

// Flattens a list of lists into a single list.
List.flatten<A: Type>(xs: List(List(A))): List(A)
  case xs:
  | List.nil<>;
  | List.concat<>(xs.head, List.flatten<>(xs.tail));

// Returns the element at given position.
List.at<A: Type>(list: List(A), index: Nat): Maybe(A)
  case list:
  | Maybe.none<>;
  | case index:
    | Maybe.some<>(list.head);
    | List.at<>(list.tail)(index.pred);;

// Do all elements satisfy a condition?
List.all<A: Type>(cond: A -> Bool, list: List(A)): Bool
  case list:
  | Bool.true;
  | case cond(list.head):
    | List.all<>(cond, list.tail);
    | Bool.false;;

// Are all elements true?
List.and(list: List(Bool)): Bool
  List.all<>((x) x, list)

/// Do any element satisfy a condition?
List.any<A: Type>(cond: A -> Bool, list: List(A)): Bool
  case list:
  | Bool.false;
  | case cond(list.head):
    | Bool.true;
    | List.any<>(cond, list.tail);;

// Is any element true?
List.or(list: List(Bool)): Bool
  List.any<>((x) x, list)

// Summation of numbers in a list
List.sum(list: List(Nat)): Nat
  List.foldl<Nat>(list)<Nat>(0, Nat.add)

// Product of numbers in a list
List.product(list: List(Nat)): Nat
  List.foldl<Nat>(list)<Nat>(1, Nat.mul)

// Reverses a List
List.reverse<A: Type>(list: List(A)): List(A)
  List.foldl<A>(list)<List(A)>(List.nil<A>, List.cons<A>)

// Computes the length of a list
List.length<A: Type>(list: List(Nat)): Nat
  List.foldl<Nat>(list)<Nat>(0, () Nat.succ)

// A list with only one element.
List.pure<A : Type>(x : A) : List(A)
  List.cons<A>(x, List.nil<A>)

// The bind function of the list Monad.
List.bind<A: Type,B: Type>(xs: List(A), f: A -> List(B)): List(B)
  List.flatten<>(List.map<,>(f, xs))

// Removes the first elements of a list.
List.drop<A: Type>(n: Nat, xs: List(A)):  List(A)
  case n:
  | xs;
  | case xs:
    | List.nil<>;
    | List.drop<>(n.pred,xs.tail);;

// Returns the first elements of a list, discards the rest.
List.take<A: Type>(n: Nat, xs: List(A)): List(A)
  case xs:
  | List.nil<>;
  | case n:
    | List.nil<>;
    | List.cons<>(xs.head,List.take<>(n.pred, xs.tail));;

// Remove elements while a condition is true
List.drop_while<A: Type>(f: A -> Bool, xs: List(A)): List(A)
  case xs:
  | List.nil<>;
  | case f(xs.head):
    | List.drop_while<>(f,xs.tail);
    | xs;;

// Takes elements while a condition is true
List.take_while<A: Type>(f: A -> Bool, xs: List(A)) : List(A)
  case xs:
  | List.nil<>;
  | case f(xs.head):
    | List.cons<>(xs.head,List.take_while<>(f,xs.tail));
    | List.nil<>;;

// Breaks a list in two lists at a specific position
List.split_at<A: Type>(n : Nat, xs: List(A)) : Pair(List(A),List(A))
  case xs:
  | Pair.new<,>(List.nil<>, List.nil<>);
  | case n:
    | Pair.new<,>(List.nil<>, xs);
    | get fst snd = List.split_at<>(n.pred, xs.tail)
      Pair.new<,>(List.cons<>(xs.head, fst), snd);;

// Removes all elements that do not satisfy a condition.
List.filter<A: Type>(f: A -> Bool, xs: List(A)): List(A)
  case xs:
  | List.nil<>;
  | case f(xs.head):
    | List.cons<>(xs.head,List.filter<>(f, xs.tail));
    | List.filter<>(f, xs.tail);;

//Finds the first occurrence that satisfies a condition
List.find<A: Type>(cond: A -> Bool, xs: List(A)): Maybe(A)
  case xs:
  | Maybe.none<>;
  | case cond(xs.head):
    | Maybe.some<>(xs.head);
    | List.find<>(cond, xs.tail);;

// Given two lists `xs` and `ys`, applies `f(xs[i],ys[i])` for all `i`.
List.zip_with<A:Type, B:Type, C:Type>(f: A -> B -> C, as: List(A), bs: List(B))
: List(C)
  case as:
  | List.nil<>;
  | case bs:
    | List.nil<>;
    | List.cons<>(f(as.head,bs.head),List.zip_with<,,>(f,as.tail,bs.tail));;

// Extracts the unique value of an array of depth 0.
Array.extract_tip<A: Type>(arr: Array(A,0)): A
  case arr:
  | arr.value;
  | Unit.new;
  : case arr.depth:
    | A;
    | Unit;;

// Extracts the two subarrays of an array of depth greater than 0.
Array.extract_tie<A: Type, depth: Nat>(arr: Array(A,Nat.succ(depth))): Pair(Array(A,depth), Array(A,depth))
  case arr:
  | Unit.new;
  | Pair.new<,>(arr.lft, arr.rgt);
  : case arr.depth:
    | Unit;
    | Pair(Array(A,arr.depth.pred), Array(A,arr.depth.pred));;

// Given array `arr` and little-endian word `idx`, extracts value `arr[idx]`.
Array.get<A:Type, depth:Nat>(idx: Word(depth), arr: Array(A,depth)): A
  def P = (depth) Array(A,depth) -> A
  def nil = Array.extract_tip<A>
  def w0 = <idx.size> (rec) (arr)
    get arr_l _ = Array.extract_tie<A, idx.size>(arr)
    rec(arr_l)
  def w1 = <idx.size> (rec) (arr)
    get _ arr_r = Array.extract_tie<A, idx.size>(arr)
    rec(arr_r)
  Word.foldl<P, depth>(nil, w0, w1, idx, arr)

// Given array `arr`, little-endian word `idx` and function `f`, assigns `arr[idx] = f(arr[idx])`.
Array.mut<A:Type, depth:Nat>(idx: Word(depth), f: A -> A, arr: Array(A,depth)): Array(A,depth)
  def P = (depth) Array(A,depth) -> Array(A,depth)
  def nil = (arr) Array.tip<A>(f(Array.extract_tip<A>(arr)))
  def w0 = <idx.size> (rec) (arr)
    get arr_l arr_r = Array.extract_tie<A, idx.size>(arr)
    Array.tie<A, idx.size>(rec(arr_l), arr_r)
  def w1 = <idx.size> (rec) (arr)
    get arr_l arr_r = Array.extract_tie<A, idx.size>(arr)
    Array.tie<A, idx.size>(arr_l, rec(arr_r))
  Word.foldl<P, depth>(nil, w0, w1, idx, arr)

// Given array `arr`, little-endian word `idx` and value `val`, assigns `arr[idx] = val`.
Array.set<A:Type, depth:Nat>(idx: Word(depth), val: A, arr: Array(A,depth))
: Array(A,depth)
  Array.mut<A,depth>(idx, () val, arr)

// Creates an array of depth `depth` and initial value `x`.
Array.alloc<A: Type>(depth: Nat, x: A): Array(A, depth)
  case depth:
  | Array.tip<A>(x);
  | let half = Array.alloc<A>(depth.pred, x)
    Array.tie<A, depth.pred>(half, half);
  : Array(A, depth.self);

// Returns the element stored at a given key, if any:
Map.get<A: Type>(bits: Bits, map: Map(A)): Maybe(A)
  case bits:
  | case map:
    | Maybe.none<>;
    | map.val;;
  | case map:
    | Maybe.none<>;
    | Map.get<>(bits.pred, map.lft);;
  | case map:
    | Maybe.none<>;
    | Map.get<>(bits.pred, map.rgt);;

// Inserts a (key,val) pair:
Map.set<A: Type>(bits: Bits, val: A, map: Map(A)): Map(A)
  case bits:
  | case map:
    | Map.tie<>(Maybe.some<>(val), Map.new<>, Map.new<>);
    | Map.tie<>(Maybe.some<>(val), map.lft, map.rgt);;
  | case map:
    | Map.tie<>(Maybe.none<>, Map.set<>(bits.pred, val, Map.new<>), Map.new<>);
    | Map.tie<>(map.val, Map.set<>(bits.pred, val, map.lft), map.rgt);;
  | case map:
    | Map.tie<>(Maybe.none<>, Map.new<>, Map.set<>(bits.pred, val, Map.new<>));
    | Map.tie<>(map.val, map.lft, Map.set<>(bits.pred, val, map.rgt));;

// Removes a key
Map.delete<A: Type>(key: Bits, map: Map(A)) : Map(A)
  case map:
  | Map.new<>;
  | case key:
    | Map.tie<>(Maybe.none<>,map.lft,map.rgt);
    | Map.delete<>(key.pred,map.lft);
    | Map.delete<>(key.pred,map.rgt);;

// Combines two maps, preferring the left-hand map in case of duplicates entries
Map.union<A: Type>(a: Map(A), b: Map(A)) : Map(A)
  case a:
  | b;
  | case b:
    | a;
    | case a.val:
      | Map.tie<>(b.val, Map.union<>(a.lft,b.lft), Map.union<>(a.rgt,b.rgt));
      | Map.tie<>(a.val, Map.union<>(a.lft,b.lft), Map.union<>(a.rgt,b.rgt));;;

// U8 zero
U8.0: U8
  U8.new(Word.zero(8))

// Increments a u8
U8.inc(a: U8): U8
  get a.word = a
  U8.new(Word.inc<8>(a.word))

U8.add(a: U8, b: U8): U8
  get a.word = a  
  get b.word = b
  U8.new(Word.add<8>(a.word, b.word))

U8.sub(a: U8, b: U8): U8
  get a.word = a  
  get b.word = b
  U8.new(Word.sub<8>(a.word, b.word))

U8.mul(a: U8, b: U8): U8
  get a.word = a  
  get b.word = b
  U8.new(Word.mul<8>(a.word, b.word))

U8.div(a: U8, b: U8): U8
  get a.word = a  
  get b.word = b
  U8.new(Word.div<8>(a.word, b.word))

U8.mod(a: U8, b: U8): U8
  get a.word = a  
  get b.word = b
  U8.new(Word.mod<8>(a.word, b.word))

U8.pow(a: U8, b: U8): U8
  get a.word = a  
  get b.word = b
  U8.new(Word.pow<8>(a.word, b.word))

U8.ltn(a: U8, b: U8): Bool
  get a.word = a  
  get b.word = b
  Word.ltn<8>(a.word, b.word)

U8.lte(a: U8, b: U8): Bool
  get a.word = a  
  get b.word = b
  Word.lte<8>(a.word, b.word)

U8.eql(a: U8, b: U8): Bool
  get a.word = a  
  get b.word = b
  Word.eql<8>(a.word, b.word)

U8.gte(a: U8, b: U8): Bool
  get a.word = a  
  get b.word = b
  Word.gte<8>(a.word, b.word)

U8.gtn(a: U8, b: U8): Bool
  get a.word = a  
  get b.word = b
  Word.gtn<8>(a.word, b.word)

U8.shr(n: Nat, a: U8): U8
  get a.word = a  
  U8.new(Word.shift_right<8>(n, a.word))

U8.shl(n: Nat, a: U8): U8
  get a.word = a  
  U8.new(Word.shift_left<8>(n, a.word))

U8.and(a: U8, b: U8): U8
  get a.word = a  
  get b.word = b
  U8.new(Word.and<8>(a.word, b.word))

U8.or(a: U8, b: U8): U8
  get a.word = a  
  get b.word = b
  U8.new(Word.or<8>(a.word, b.word))

U8.xor(a: U8, b: U8): U8
  get a.word = a  
  get b.word = b
  U8.new(Word.xor<8>(a.word, b.word))

// U16 zero
U16.0: U16
  U16.new(Word.zero(16))

// Increments a u16
U16.inc(a: U16): U16
  get a.word = a
  U16.new(Word.inc<16>(a.word))

U16.to_bits(a: U16): Bits 
  get a.word = a 
  Word.to_bits<16>(a.word)

U16.to_nat(a: U16): Nat
  get a.word = a 
  Word.to_nat<16>(a.word)

U16.to_u32(a: U16): U32
  get a.word = a 
  U32.new(Word.trim<16>(32, a.word))

U16.parse_hex(str: String): U16 
  U16.new(Word.from_bits(16, Bits.parse_hex(str)))

U16.add(a: U16, b: U16): U16
  get a.word = a  
  get b.word = b
  U16.new(Word.add<16>(a.word, b.word))

U16.sub(a: U16, b: U16): U16
  get a.word = a  
  get b.word = b
  U16.new(Word.sub<16>(a.word, b.word))

U16.mul(a: U16, b: U16): U16
  get a.word = a  
  get b.word = b
  U16.new(Word.mul<16>(a.word, b.word))

U16.div(a: U16, b: U16): U16
  get a.word = a  
  get b.word = b
  U16.new(Word.div<16>(a.word, b.word))

U16.concat(a: U16, b: U16): U32
  get a.word = a
  get b.word = b 
  U32.new(Word.concat<16,16>(a.word, b.word))

U16.mod(a: U16, b: U16): U16
  get a.word = a  
  get b.word = b
  U16.new(Word.mod<16>(a.word, b.word))

U16.pow(a: U16, b: U16): U16
  get a.word = a  
  get b.word = b
  U16.new(Word.pow<16>(a.word, b.word))

U16.ltn(a: U16, b: U16): Bool
  get a.word = a  
  get b.word = b
  Word.ltn<16>(a.word, b.word)

U16.lte(a: U16, b: U16): Bool
  get a.word = a  
  get b.word = b
  Word.lte<16>(a.word, b.word)

U16.eql(a: U16, b: U16): Bool
  get a.word = a  
  get b.word = b
  Word.eql<16>(a.word, b.word)

U16.gte(a: U16, b: U16): Bool
  get a.word = a  
  get b.word = b
  Word.gte<16>(a.word, b.word)

U16.gtn(a: U16, b: U16): Bool
  get a.word = a  
  get b.word = b
  Word.gtn<16>(a.word, b.word)

U16.shr(n: U16, a: U16): U16
  get a.word = a
  let n_nat  = U16.to_nat(n)   
  U16.new(Word.shift_right<16>(n_nat, a.word))

U16.shl(n: U16, a: U16): U16
  get a.word = a  
  let n_nat  = U16.to_nat(n) 
  U16.new(Word.shift_left<16>(n_nat, a.word))

U16.and(a: U16, b: U16): U16
  get a.word = a  
  get b.word = b
  U16.new(Word.and<16>(a.word, b.word))

U16.or(a: U16, b: U16): U16
  get a.word = a  
  get b.word = b
  U16.new(Word.or<16>(a.word, b.word))

U16.xor(a: U16, b: U16): U16
  get a.word = a  
  get b.word = b
  U16.new(Word.xor<16>(a.word, b.word))

// U32 zero
U32.0: U32
  U32.new(Word.zero(32))

// Increments a u32
U32.inc(a: U32): U32
  get a.word = a 
  U32.new(Word.inc<32>(a.word))

U32.to_bits(a: U32): Bits
  get a.word = a 
  Word.to_bits<32>(a.word)

U32.to_nat(a: U32): Nat 
  get a.word = a 
  Word.to_nat<32>(a.word)

U32.parse_hex(str: String): U32
  U32.new(Word.from_bits(32, Bits.parse_hex(str)))

U32.concat(a: U32, b: U32): U64 
  get a.word = a  
  get b.word = b
  U64.new(Word.concat<32,32>(a.word, b.word))

U32.add(a: U32, b: U32): U32
  get a.word = a  
  get b.word = b
  U32.new(Word.add<32>(a.word, b.word))

U32.sub(a: U32, b: U32): U32
  get a.word = a  
  get b.word = b
  U32.new(Word.sub<32>(a.word, b.word))

U32.mul(a: U32, b: U32): U32
  get a.word = a  
  get b.word = b
  U32.new(Word.mul<32>(a.word, b.word))

U32.div(a: U32, b: U32): U32
  get a.word = a  
  get b.word = b
  U32.new(Word.div<32>(a.word, b.word))

U32.mod(a: U32, b: U32): U32
  get a.word = a  
  get b.word = b
  U32.new(Word.mod<32>(a.word, b.word))

U32.pow(a: U32, b: U32): U32
  get a.word = a  
  get b.word = b
  U32.new(Word.pow<32>(a.word, b.word))

U32.ltn(a: U32, b: U32): Bool
  get a.word = a  
  get b.word = b
  Word.ltn<32>(a.word, b.word)

U32.lte(a: U32, b: U32): Bool
  get a.word = a  
  get b.word = b
  Word.lte<32>(a.word, b.word)

U32.eql(a: U32, b: U32): Bool
  get a.word = a  
  get b.word = b
  Word.eql<32>(a.word, b.word)

U32.gte(a: U32, b: U32): Bool
  get a.word = a  
  get b.word = b
  Word.gte<32>(a.word, b.word)

U32.gtn(a: U32, b: U32): Bool
  get a.word = a  
  get b.word = b
  Word.gtn<32>(a.word, b.word)

U32.shr(n: U32, a: U32): U32
  get a.word = a  
  let n_nat  = U32.to_nat(n)
  U32.new(Word.shift_right<32>(n_nat, a.word))

U32.shl(n: U32, a: U32): U32
  get a.word = a  
  let n_nat  = U32.to_nat(n)
  U32.new(Word.shift_left<32>(n_nat, a.word))

U32.and(a: U32, b: U32): U32
  get a.word = a  
  get b.word = b
  U32.new(Word.and<32>(a.word, b.word))

U32.or(a: U32, b: U32): U32
  get a.word = a  
  get b.word = b
  U32.new(Word.or<32>(a.word, b.word))

U32.xor(a: U32, b: U32): U32
  get a.word = a  
  get b.word = b
  U32.new(Word.xor<32>(a.word, b.word))

// TODO
U32.slice(i: U32, j: U32, str: String): String
  U32.slice(i, j, str)

// TODO
U32.to_f64(a: U32): F64
  U32.to_f64(a)

// TODO
U32.read_base(base: U32, str: String): U32
  U32.read_base(base, str)

// TODO
U32.length(str: String): U32
  U32.length(str)

// Helper function
U32.needed_depth.go(n: U32): Nat
  if U32.eql(n, 0u) then
    0
  else
    Nat.succ(U32.needed_depth.go(U32.shr(n,1u)))

// Gets the needed depth to fit a number of elements in an Array
U32.needed_depth(size: U32): Nat
  U32.needed_depth.go(U32.sub(size, 1u))

// U32 for-loop
U32.for<S: Type>(state: S, from: U32, til: U32, func: U32 -> S -> S): S
  if U32.eql(from, til) then
    state
  else
    U32.for<S>(func(from, state), U32.inc(from), til, func)

// U64 zero
U64.0: U64
  U64.new(Word.zero(64))

U64.to_bits(a: U64): Bits 
  get a.word = a 
  Word.to_bits<64>(a.word)

U64.to_nat(a: U64): Nat 
  get a.word = a 
  Word.to_nat<64>(a.word)

// Increments a u64
U64.inc(a: U64): U64
  get a.word = a 
  U64.new(Word.inc<64>(a.word))

U64.add(a: U64, b: U64): U64
  get a.word = a 
  get b.word = b 
  U64.new(Word.add<64>(a.word, b.word))

U64.sub(a: U64, b: U64): U64
  get a.word = a 
  get b.word = b 
  U64.new(Word.sub<64>(a.word, b.word))

U64.mul(a: U64, b: U64): U64
  get a.word = a 
  get b.word = b 
  U64.new(Word.mul<64>(a.word, b.word))

U64.div(a: U64, b: U64): U64
  get a.word = a 
  get b.word = b 
  U64.new(Word.div<64>(a.word, b.word))

U64.mod(a: U64, b: U64): U64
  get a.word = a 
  get b.word = b 
  U64.new(Word.mod<64>(a.word, b.word))

U64.pow(a: U64, b: U64): U64
  get a.word = a 
  get b.word = b 
  U64.new(Word.pow<64>(a.word, b.word))

U64.ltn(a: U64, b: U64): Bool
  get a.word = a 
  get b.word = b 
  Word.ltn<64>(a.word, b.word)

U64.lte(a: U64, b: U64): Bool
  get a.word = a 
  get b.word = b 
  Word.lte<64>(a.word, b.word)

U64.eql(a: U64, b: U64): Bool
  get a.word = a 
  get b.word = b 
  Word.eql<64>(a.word, b.word)

U64.gte(a: U64, b: U64): Bool
  get a.word = a 
  get b.word = b 
  Word.gte<64>(a.word, b.word)

U64.gtn(a: U64, b: U64): Bool
  get a.word = a 
  get b.word = b 
  Word.gtn<64>(a.word, b.word)

U64.shr(n: U64, a: U64): U64
  get a.word = a
  let n_nat  = U64.to_nat(n) 
  U64.new(Word.shift_right<64>(n_nat, a.word))

U64.shl(n: U64, a: U64): U64
  get a.word = a
  let n_nat  = U64.to_nat(n) 
  U64.new(Word.shift_left<64>(n_nat, a.word))

U64.and(a: U64, b: U64): U64
  get a.word = a 
  get b.word = b 
  U64.new(Word.and<64>(a.word, b.word))

U64.or(a: U64, b: U64): U64
  get a.word = a 
  get b.word = b 
  U64.new(Word.or<64>(a.word, b.word))

U64.xor(a: U64, b: U64): U64
  get a.word = a 
  get b.word = b 
  U64.new(Word.xor<64>(a.word, b.word))

U64.parse_hex(str: String): U64 
  U64.new(Word.from_bits(64, Bits.parse_hex(str)))

F64.0: F64
  F64.new(Word.zero(64))

F64.inc(a: F64): F64
  get a.word = a 
  F64.new(Word.inc<64>(a.word))

F64.add(a: F64, b: F64): F64
  get a.word = a 
  get b.word = b 
  F64.new(Word.add<64>(a.word, b.word))

F64.sub(a: F64, b: F64): F64
  get a.word = a 
  get b.word = b 
  F64.new(Word.sub<64>(a.word, b.word))

F64.mul(a: F64, b: F64): F64
  get a.word = a 
  get b.word = b 
  F64.new(Word.mul<64>(a.word, b.word))

F64.div(a: F64, b: F64): F64
  get a.word = a 
  get b.word = b 
  F64.new(Word.div<64>(a.word, b.word))

F64.mod(a: F64, b: F64): F64
  get a.word = a 
  get b.word = b 
  F64.new(Word.mod<64>(a.word, b.word))

F64.pow(a: F64, b: F64): F64
  get a.word = a 
  get b.word = b 
  F64.new(Word.pow<64>(a.word, b.word))

// TODO
F64.cos(a: F64): F64
  F64.cos(a)

// TODO
F64.sin(a: F64): F64
  F64.sin(a)

// TODO
F64.tan(a: F64): F64
  F64.tan(a)

// TODO
F64.acos(a: F64): F64
  F64.acos(a)

// TODO
F64.asin(a: F64): F64
  F64.asin(a)

// TODO
F64.atan(a: F64): F64
  F64.atan(a)

// Tau constant
F64.tau: F64
  6.28318530718

// Rotates a 2D vector around origin
F64.rotate2d(x: F64, y: F64, a: F64): Pair(F64, F64)
  let x2 = F64.sub(F64.mul(x, F64.cos(a)), F64.mul(y, F64.sin(a)))
  let y2 = F64.add(F64.mul(x, F64.sin(a)), F64.mul(y, F64.cos(a)))
  Pair.new<,>(x2, y2)

F64.ltn(a: F64, b: F64): Bool
  get a.word = a 
  get b.word = b 
  Word.ltn<64>(a.word, b.word)

F64.lte(a: F64, b: F64): Bool
  get a.word = a 
  get b.word = b 
  Word.lte<64>(a.word, b.word)

F64.eql(a: F64, b: F64): Bool
  get a.word = a 
  get b.word = b 
  Word.eql<64>(a.word, b.word)

F64.gte(a: F64, b: F64): Bool
  get a.word = a 
  get b.word = b 
  Word.gte<64>(a.word, b.word)

F64.gtn(a: F64, b: F64): Bool
  get a.word = a 
  get b.word = b 
  Word.gtn<64>(a.word, b.word)

// TODO
F64.to_u32(a: F64): U32
  F64.to_u32(a)

T F64.V3
| F64.V3.new(x: F64, y: F64, z: F64);

F64.V3.eql(a: F64.V3, b: F64.V3): Bool
  get a.x a.y a.z = a
  get b.x b.y b.z = b
  let same_x = F64.eql(a.x, b.x)
  let same_y = F64.eql(a.y, b.y)
  let same_z = F64.eql(a.z, b.z)
  Bool.and(same_x, Bool.and(same_y, same_z))

F64.V3.get_x(v: F64.V3): F64
  get v.x v.y v.z = v 
  v.x
  
F64.V3.get_y(v: F64.V3): F64
  get v.x v.y v.z = v 
  v.y
  
F64.V3.get_z(v: F64.V3): F64
  get v.x v.y v.z = v 
  v.z

F64.V3.len(v: F64.V3): F64
  get v.x v.y v.z = v 
  let sqr  = F64.0
  let sqr  = F64.add(sqr, F64.mul(v.x, v.x))
  let sqr  = F64.add(sqr, F64.mul(v.y, v.y))
  let sqr  = F64.add(sqr, F64.mul(v.z, v.z))
  let sqr  = F64.pow(sqr, 0.5)
  sqr

F64.V3.add(a: F64.V3, b: F64.V3): F64.V3 
  get a.x a.y a.z = a
  get b.x b.y b.z = b
  let c.x = F64.add(a.x, a.x)
  let c.y = F64.add(a.y, b.y)
  let c.z = F64.add(a.z, b.z)
  F64.V3.new(c.x, c.y, c.z)

// Creates a char from 16 bits
Char.new
(b0: Bit) (b1: Bit) (b2: Bit) (b3: Bit)
(b4: Bit) (b5: Bit) (b6: Bit) (b7: Bit)
(b8: Bit) (b9: Bit) (bA: Bit) (bB: Bit)
(bC: Bit) (bD: Bit) (bE: Bit) (bF: Bit)
: U16
  let kF = b0<>(Word.0<>, Word.1<>)
  let kE = b1<>(Word.0<>, Word.1<>)
  let kD = b2<>(Word.0<>, Word.1<>)
  let kC = b3<>(Word.0<>, Word.1<>)
  let kB = b4<>(Word.0<>, Word.1<>)
  let kA = b5<>(Word.0<>, Word.1<>)
  let k9 = b6<>(Word.0<>, Word.1<>)
  let k8 = b7<>(Word.0<>, Word.1<>)
  let k7 = b8<>(Word.0<>, Word.1<>)
  let k6 = b9<>(Word.0<>, Word.1<>)
  let k5 = bA<>(Word.0<>, Word.1<>)
  let k4 = bB<>(Word.0<>, Word.1<>)
  let k3 = bC<>(Word.0<>, Word.1<>)
  let k2 = bD<>(Word.0<>, Word.1<>)
  let k1 = bE<>(Word.0<>, Word.1<>)
  let k0 = bF<>(Word.0<>, Word.1<>)
  let kx = Word.nil
  U16.new(k0(k1(k2(k3(k4(k5(k6(k7(k8(k9(kA(kB(kC(kD(kE(kF(kx)))))))))))))))))

Char.newline: Char
  Char.new(
    Bit.0, Bit.0, Bit.0, Bit.0,
    Bit.0, Bit.0, Bit.0, Bit.0,
    Bit.0, Bit.0, Bit.0, Bit.0,
    Bit.1, Bit.0, Bit.1, Bit.0)

// Receives a hex char (0-9, a-f, A-F) and returns its value.
Char.hex_value16(chr: Char): U16
  def U16.add10((x0)
    def x1 = U16.inc(U16.inc(U16.inc(U16.inc(U16.inc(x0)))))
    def x2 = U16.inc(U16.inc(U16.inc(U16.inc(U16.inc(x1)))))
    x2) :: U16 -> U16
  if Bool.and(U16.gte(chr,'0'),U16.lte(chr,'9')) then
    U16.sub(chr,'0')
  else if Bool.and(U16.gte(chr,'a'),U16.lte(chr,'f')) then
    U16.add10(U16.sub(chr,'a'))
  else if Bool.and(U16.gte(chr,'A'),U16.lte(chr,'F')) then
    U16.add10(U16.sub(chr,'A'))
  else
    U16.0

Char.hex_value32(chr: Char): U32
  U16.to_u32(Char.hex_value16(chr))

Char.hex_value(chr: Char): Nat
  U32.to_nat(Char.hex_value32(chr))

Char.parse.type(str: String): Type
  case str:
  | Unit;
  | Char;

// Parses a character. Example: `Char.parse("x")`
Char.parse(str: String): Char.parse.type(str)
  case str:
  | Unit.new;
  | str.head;
  : Char.parse.type(str.self);

// Folds over a string
String.fold(str: String)<P: Type>(nil: P, cons: Char -> P -> P): P
  case str:
  | nil;
  | cons(str.head, String.fold(str.tail)<P>(nil, cons));

// Left folds over a String
String.foldl(str: String)<P: Type>(nil: P, cons: Char -> P -> P): P
  case str:
  | nil;
  | String.foldl(str.tail)<P>(cons(str.head, nil), cons);

// Converts a string to a list
String.to_list(str: String): List(Char)
  case str:
  | List.nil<>;
  | List.cons<>(str.head, String.to_list(str.tail));

// Converts a list to a string
List.to_string(xs: List(Char)): String
  case xs:
  | String.nil;
  | String.cons(xs.head, List.to_string(xs.tail));

// Compares two strings
String.eql(a: String, b: String): Bool
  case a:
  | case b:
    | Bool.true;
    | Bool.false;;
  | case b:
    | Bool.false;
    | Bool.and(U16.eql(a.head,b.head), String.eql(a.tail,b.tail));;

// Concatenates two strings.
String.concat(as: String, bs: String): String
  case as:
  | bs;
  | String.cons(as.head, String.concat(as.tail,bs));

// Applies a function to all characters of the string.
String.map(f: Char -> Char, as: String): String
  case as:
  | String.nil;
  | String.cons(f(as.head),String.map(f,as.tail));

// Map over a string with the index
String.imap(f: Nat -> Char -> Char, xs: String): String
  case xs:
  | String.nil;
  | String.cons(f(0,xs.head),String.imap((n) f(Nat.succ(n)),xs.tail));

// insert separators between characters, i.e. `[A,B,C] ~> [A,sep,B,sep,C]`
String.intersperse(sep: Char, xs: String): String
  case xs:
  | String.nil;
  | case xs.tail:
    | String.pure(xs.head);
    | String.cons(xs.head,String.cons(sep,String.intersperse(sep,xs.tail)));;

// Flattens a string of strings into a single string.
String.flatten(xs: List(String)): String
  case xs:
  | String.nil;
  | String.concat(xs.head, String.flatten(xs.tail));

// A string with only one character.
String.pure(x : Char) : String
  String.cons(x, String.nil)

// The bind function of the string Monad.
String.bind(xs: String, f: Char -> String): String
  case xs:
  | String.nil;
  | String.concat(f(xs.head), String.bind(xs.tail,f));

// Removes the first characters of a string.
String.drop(n: Nat, xs: String):  String
  case n:
  | xs;
  | case xs:
    | String.nil;
    | String.drop(n.pred,xs.tail);;

// Remove characters while a condition is true
String.drop_while(f: Char -> Bool, xs: String): String
  case xs:
  | String.nil;
  | case f(xs.head):
    | String.drop_while(f,xs.tail);
    | xs;;

// Removes all characters that do not satisfy a condition.
String.filter(f: Char -> Bool, xs: String): String
  case xs:
  | String.nil;
  | case f(xs.head):
    | String.cons(xs.head,String.filter(f, xs.tail));
    | String.filter(f, xs.tail);;

// Returns the first characters of a string, discards the rest.
String.take(n: Nat, xs: String): String
  case xs:
  | String.nil;
  | case n:
    | String.nil;
    | String.cons(xs.head,String.take(n.pred, xs.tail));;

// Splits a string at a given position
String.split_at(n : Nat, xs: String) : Pair(String,String)
  Pair.new<,>(String.take(n,xs),String.drop(n,xs))

// Takes a substring between two indices
String.slice(i: Nat, j: Nat, xs: String): String
  String.take(Nat.sub(j, i), String.drop(i, xs))

// TODO
Buffer32.get(idx: U32, buf: Buffer32): U32
  get dep arr = buf
  get wrd = idx
  let idx = Word.trim<32>(dep, wrd)
  Array.get<U32, dep>(idx, arr)

// TODO
Buffer32.set(idx: U32, val: U32, buf: Buffer32): Buffer32
  get dep arr = buf
  get wrd = idx
  let idx = Word.trim<32>(dep, wrd)
  def arr = Array.set<U32, dep>(idx, val, arr)
  Buffer32.new(dep, arr)

// TODO
Buffer32.alloc(depth: Nat): Buffer32
  Buffer32.new(depth, Array.alloc<U32>(depth, U32.0))

// The monadic pure:
Monad.pure<M: Type -> Type>(m: Monad(M))
: <A: Type> -> A -> M(A)
  case m:
  | m.pure;

// The monadic bind:
Monad.bind<M: Type -> Type>(m: Monad(M))
: <A: Type, B: Type> -> M(A) -> (A -> M(B)) -> M(B)
  case m:
  | m.bind;

// Asks a question and returns the answer:
IO.prompt(text: String): IO(String)
  use skip = IO.ask<String>("print", text)
  use line = IO.ask<String>("get_line", "")
  IO.end<String>(line)

// Prints a string and returns:
IO.print(text: String): IO(Unit)
  use skip = IO.ask<Unit>("print", text)
  IO.end<Unit>(Unit.new)

// IO monad instance
IO.bind<A: Type, B: Type>(a: IO(A), f: A -> IO(B)): IO(B)
  case a:
  | f(a.value);
  | IO.ask<B>(a.query, a.param, (x) IO.bind<A,B>(a.then(x), f));
IO.monad: Monad(IO)
  Monad.new<IO>(IO.bind, IO.end)

// Logs a message to the console
Debug.log<A: Type>(s: String, x: Unit -> A): A
  x(Unit.new)

// TODO 
Pos32.from_xyz(x: U32, y: U32, z: U32): Pos32
  let pos = 0u
  let pos = U32.or(pos, x)
  let pos = U32.or(pos, U32.shl(y, 12u))
  let pos = U32.or(pos, U32.shl(z, 24u))
  pos

// TODO 
Pos32.get_x(pos: Pos32): U32
  U32.and(pos, 2047u)

// TODO 
Pos32.get_y(pos: Pos32): U32
  U32.and(U32.shr(pos, 12u), 2047u)

// TODO 
Pos32.get_z(pos: Pos32): U32
  U32.shr(pos, 24u)

// TODO 
Col32.from_rgba(r: U32, g: U32, b: U32, a: U32): Col32
  let col = 0u
  let col = U32.or(col, r)
  let col = U32.or(col, U32.shl(g, 8u))
  let col = U32.or(col, U32.shl(b, 16u))
  let col = U32.or(col, U32.shl(a, 24u))
  col

// TODO 
Col32.get_r(col: Col32): U32
  U32.and(col, 255u)

// TODO 
Col32.get_g(col: Col32): U32
  U32.and(U32.shr(col, 8u), 255u)

// TODO 
Col32.get_b(col: Col32): U32
  U32.and(U32.shr(col, 16u), 255u)

// TODO 
Col32.get_a(col: Col32): U32
  U32.and(U32.shr(col, 24u), 255u)

// TODO 
VoxModel.alloc_size(size: U32): VoxModel
  VoxModel.new(size, Buffer32.alloc(U32.needed_depth(U32.mul(2u,size))))

// TODO 
VoxModel.get_pos(idx: U32, vox: VoxModel): U32
  case vox:
  | Buffer32.get(U32.mul(idx,2u), vox.buffer);

// TODO 
VoxModel.get_col(idx: U32, vox: VoxModel): U32
  case vox:
  | Buffer32.get(U32.add(U32.mul(idx,2u),1u), vox.buffer);

// TODO 
VoxModel.set_pos(idx: U32, pos: U32, vox: VoxModel): VoxModel
  case vox:
  | let vox.buffer = Buffer32.set(U32.mul(idx,2u), pos, vox.buffer)
    VoxModel.new(vox.size, vox.buffer);

// TODO 
VoxModel.set_col(idx: U32, col: U32, vox: VoxModel): VoxModel
  case vox:
  | let vox.buffer = Buffer32.set(U32.add(U32.mul(idx,2u),1u), col, vox.buffer)
    VoxModel.new(vox.size, vox.buffer);

// TODO 
VoxModel.parse_byte(idx: U32, voxdata: String): U32
  let chr = U32.slice(U32.mul(idx,2u), U32.add(U32.mul(idx,2u),2u), voxdata)
  U32.read_base(16u, chr)

// TODO 
VoxModel.parse(voxdata: String): VoxModel
  let voxsize = U32.div(U32.length(voxdata), 12u)
  let voxmodel = VoxModel.alloc_size(voxsize);
  U32.for<VoxModel>(voxmodel, 0u, voxsize)
  | (i, voxmodel)
    let x = VoxModel.parse_byte(U32.add(U32.mul(i, 6u), 0u), voxdata)
    let y = VoxModel.parse_byte(U32.add(U32.mul(i, 6u), 1u), voxdata)
    let z = VoxModel.parse_byte(U32.add(U32.mul(i, 6u), 2u), voxdata)
    let r = VoxModel.parse_byte(U32.add(U32.mul(i, 6u), 3u), voxdata)
    let g = VoxModel.parse_byte(U32.add(U32.mul(i, 6u), 4u), voxdata)
    let b = VoxModel.parse_byte(U32.add(U32.mul(i, 6u), 5u), voxdata)
    let voxmodel = VoxModel.set_col(i, Col32.from_rgba(r,g,b,255u), voxmodel)
    let voxmodel = VoxModel.set_pos(i, Pos32.from_xyz(x,y,z), voxmodel)
    voxmodel;

// A demo application that renders a square on the screen
App.demo.0: App(Pair(U32,U32))
  let vox = VoxModel.alloc_size(256u)
  def init
    Pair.new<,>(U32.0, U32.0)
  def draw(state)
    get mouse_x mouse_y = state
    App.Render.vox
    | use idx vox = U32.for<>(vox, 0u, 256u)
      let p_x = U32.sub(U32.add(mouse_x,U32.mod(idx,16u)),8u) // pixel x
      let p_y = U32.sub(U32.add(mouse_y,U32.div(idx,16u)),8u) // pixel y
      let pos = Pos32.from_xyz(p_x, p_y, 128u) // pixel pos (forms a square)
      let col = Col32.from_rgba(255u, 0u, 0u, 255u) // pixel color (red)
      let vox = VoxModel.set_pos(idx, pos, vox)
      let vox = VoxModel.set_col(idx, col, vox)
      vox;
  def when(event, state)
    case event:
    | tick => event.mouse;
    | ukey => state;
    | post => state;
  App.new<>(init, draw, when)


Bits.parse_hex(str: String): Bits
  Bits.parse_hex.go(str, Bits.nil)

Bits.parse_hex.go(str: String, res: Bits): Bits
  case str:
  | res;
  | let b0000 = Bits.0(Bits.0(Bits.0(Bits.0(Bits.nil))))
    let bhead = Nat.apply<Bits>(Char.hex_value(str.head), Bits.inc, b0000)
    Bits.parse_hex.go(str.tail, Bits.concat(bhead, res));



// TODO: improve syntax
Word.add.aux: <size: Nat> -> Word(size) -> Word(size) -> Bool -> Word(size)
  <size> (a) (b) (c)
  ( a<(a.size) () Word(a.size) -> Word(a.size)>
  | (b) Word.nil;
  | <a.size> (a.pred) (b)
    ( b<(b.size) () Word(Nat.pred(b.size)) -> Word(b.size)>
    | (a.pred)
      Word.nil;
    | <b.size> (b.pred) (a.pred)
      c<() Unit -> Word(Nat.succ(b.size))>
      | () Word.1<b.size>(Word.add.aux<b.size>(a.pred)(b.pred)(Bool.false));  // a=0 b=0 c=0
      | () Word.0<b.size>(Word.add.aux<b.size>(a.pred)(b.pred)(Bool.false));
      | Unit.new;; // a=0 b=0 c=1
    | <b.size> (b.pred) (a.pred)
      c<() Unit -> Word(Nat.succ(b.size))>
      | () Word.0<b.size>(Word.add.aux<b.size>(a.pred)(b.pred)(Bool.true));   // a=0 b=1 c=0
      | () Word.1<b.size>(Word.add.aux<b.size>(a.pred)(b.pred)(Bool.false));  // a=0 b=1 c=1
      | Unit.new;
    ;)(a.pred);
  | <a.size> (a.pred) (b)
    ( b<(b.size) () Word(Nat.pred(b.size)) -> Word(b.size)>
    | (a.pred) Word.nil;
    | <b.size> (b.pred) (a.pred)
      c<() Unit -> Word(Nat.succ(b.size))>
      | () Word.0<b.size>(Word.add.aux<b.size>(a.pred)(b.pred)(Bool.true));   // a=1 b=0 c=0
      | () Word.1<b.size>(Word.add.aux<b.size>(a.pred)(b.pred)(Bool.false));
      | Unit.new;; // a=1 b=0 c=1
    | <b.size> (b.pred) (a.pred)
      c<() Unit -> Word(Nat.succ(b.size))>
      | () Word.1<b.size>(Word.add.aux<b.size>(a.pred)(b.pred)(Bool.true));   // a=1 b=1 c=0
      | () Word.0<b.size>(Word.add.aux<b.size>(a.pred)(b.pred)(Bool.true));   // a=1 b=1 c=1
      | Unit.new;
    ;)(a.pred)
  ;)(b)

Word.add<size: Nat>(a: Word(size), b: Word(size)): Word(size)
  Word.add.aux<size>(a, b, Bool.false)

Word.and<size: Nat>(a: Word(size), b: Word(size)): Word(size)
  Word.and<size>(a, b)

Word.concat
  : <a_size: Nat> ->
    <b_size: Nat> ->
    Word(a_size) ->
    Word(b_size) ->
    Word(Nat.add(a_size)(b_size))
  <a_size> <b_size> (a) (b)
  a<(a_size) () Word(Nat.add(a_size)(b_size))>
  | b;
  | <a.size> (a.pred)
    let rest = Word.concat<a.size><b_size>(a.pred)(b)
    Word.0<Nat.add(a.size)(b_size)>(rest);
  | <a.size> (a.pred)
    let rest = Word.concat<a.size><b_size>(a.pred)(b)
    Word.1<Nat.add(a.size)(b_size)>(rest);

// TODO word division
Word.div: <size: Nat> -> Word(size) -> Word(size) -> Word(size)
  Word.div

Word.drop: <size: Nat> -> (n: Nat) -> Word(Nat.add(n)(size)) -> Word(size)
  <size> (n) (word)
  n<(n) Word(Nat.add(n)(size)) -> Word(size)>
  | (word) word;
  | (n.pred) (word)
    let word.pred = Word.pred<Nat.add(n.pred)(size)>(word)
    Word.drop<size>(n.pred)(word.pred);
  | word;

Word.from_bits: (size: Nat) -> Bits -> Word(size)
  (size) (bits)
  size<(size) Word(size)>
  | Word.nil;
  | (size.pred)
    bits<() Word(Nat.succ(size.pred))>
    | Word.0<size.pred>(Word.from_bits(size.pred)(Bits.nil));
    | (bits.pred) Word.0<size.pred>(Word.from_bits(size.pred)(bits.pred));
    | (bits.pred) Word.1<size.pred>(Word.from_bits(size.pred)(bits.pred));;


// TODO word modulus
Word.mod: <size: Nat> -> Word(size) -> Word(size) -> Word(size)
  Word.mod

// TODO Multiplies two words
Word.mul: <size: Nat> -> Word(size) -> Word(size) -> Word(size)
  Word.mul

// TODO bitwise OR between two words
Word.or: <size: Nat> -> Word(size) -> Word(size) -> Word(size)
  Word.or

Word.parse_hex: (size: Nat) -> String -> Word(size)
  (size) (str)
  Word.from_bits(size)(Bits.parse_hex(str))

// TODO word exponentiation
Word.pow: <size: Nat> -> Word(size) -> Word(size) -> Word(size)
  Word.pow

Word.pred: <size: Nat> -> Word(Nat.succ(size)) -> Word(size)
  <size> (word)
  word<(size) () Word(Nat.pred(size))>
  | Word.nil;
  | <word.size> (word.pred) word.pred;
  | <word.size> (word.pred) word.pred;

// TODO Bitwise-shifts a word left
Word.shift_left: <size: Nat> -> Nat -> Word(size) -> Word(size)
  Word.shift_left

// TODO Bitwise-shifts a word right
Word.shift_right: <size: Nat> -> Nat -> Word(size) -> Word(size)
  Word.shift_right

Word.sub: <size: Nat> -> Word(size) -> Word(size) -> Word(size)
  Word.sub

Word.to_bits: <size: Nat> -> Word(size) -> Bits
  <size> (a)
  a<() () Bits>
  | Bits.nil;
  | <size> (pred) Bits.0(Word.to_bits<size>(pred));
  | <size> (pred) Bits.1(Word.to_bits<size>(pred));

// TODO bitwise XOR between two words
Word.xor: <size: Nat> -> Word(size) -> Word(size) -> Word(size)
  Word.xor

Word.nat_log2.go<size: Nat>(word: Word(size), c: Nat, n: Nat): Nat
  case word:
  | n;
  | Word.nat_log2.go<word.size>(word.pred, Nat.succ(c), n);
  | Word.nat_log2.go<word.size>(word.pred, Nat.succ(c), c);
  
Word.nat_log2<size: Nat>(word: Word(size)): Nat
  Word.nat_log2.go<size>(word, 0, 0)

Word.indl<P: Nat -> Type, m: Nat>
(nil  : P(Nat.zero))
(w0   : <n: Nat> -> P(n) -> P(Nat.succ(n)))
(w1   : <n: Nat> -> P(n) -> P(Nat.succ(n)))
(word : Word(m))
: P(m)
  case word:
  | nil;
  | def P   = (n) P(Nat.succ(n))
    def nil = w0<Nat.zero>(nil)
    def w0  = <x> w0<Nat.succ(x)>
    def w1  = <x> w1<Nat.succ(x)>
    Word.indl<P, word.size>(nil, w0, w1, word.pred);
  | def P   = (n) P(Nat.succ(n))
    def nil = w1<Nat.zero>(nil)
    def w0  = <x> w0<Nat.succ(x)>
    def w1  = <x> w1<Nat.succ(x)>
    Word.indl<P, word.size>(nil, w0, w1, word.pred);
  : P(word.size);